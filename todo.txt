Bugs:
- Custom socket bugs (workaround using Qt sockets):
  - On OSX there is sporadic lag.
  - Large packets go missing.
- Large steps often render before the catching the target frame.
  - Add a check to Router.Update() on whether the thread is at the target frame. Keep looping while not.
    - Also include a time limit to prevent deadlock.

TODO:
- Revise MeshSet/MeshShape.
  - Revised MeshSet to support overriding indexing.
  - Meshes to support instancing topology. Ideal for visualising voxels.
- Consolidate C# shape constructors and improve consistency.
- When recording on the client: periodically serialise the world state as a key frame.
  - Serialise after every N bytes written.
  - During playback, note the file positions on each key frame and use these for faster step back operations.
  - Post soft reset notification to MessageHandler objects.
    - Have MeshCache keep its resources, but marked as uncreated to help reduce memory reallocation. 
- Client log for error messages.
  - Handler options and UI
  - Camera Selection UI
- Playback speed control.
- Scene Graph UI
- Make sure modal dialogs work properly blocking input to background layers.
- Export to PLY file (because PLY is easy).
- Annotation frames.
  - Skip/step by annotation frames.
- Flush transient objects from a specific category.
  - To support variable update rates. E.g., physics may run at a different frame rate to AI.
- Client rendering override modes:
  - Solid/wireframe overlay
  - Wireframe override
- Support splitting recording files at around 2GB.

Maybe:
- Support other socket implementations in the c++ server code. E.g., POCO, Qt, asio.

Performance improvements:
- Need to investigate how to do more object management off the main thread. Not well supported by Unity as it doesn't allow objects to be created on other threads.
- Improve shutdown time after using large objects.

Pie in the sky:
- Load in a mesh/scene for reference and/or context.
- Python core/server implementation
- Client "breakpoints". Server blocks until the client allows continuation.
  - Difficulty is in nicely specifying the breakpoint and enabling/disabling.
    - Maybe server macros can leverage __FILE__ and __LINE__ to help.
- An actual UX design.
