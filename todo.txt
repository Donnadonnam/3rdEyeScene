Bugs:
- Suspect: object recycling in ShapeHandler appears to sometimes activate invalid objects.

TODO for v1.0:
- Client log UI and output window.
- Consolidate C# shape constructors and improve consistency.
- PROTOCOL CHANGE: Reduce object overhead. Creating many objects is expensive in data throughput and packet processing.
  - Modify ObjectAttributes structure (for update messages only?) to have a 1-byte flag member which identifies which of colour, position, rotation and scale data are present.
  - Consider moving major/minor version members of PacketHeader into ServerSettings message.
  - Support batch object creation?

TODO:
- "Server" implementation which writes directly to a local file.
- Change shape shaders to support GPU instancing.
- Consider adding batched object creation messages.
- UI:
  - Camera Selection UI
  - Handler options and UI
  - Scene Graph UI
- Export to PLY file (because PLY is easy).
- Annotation frames.
  - Skip/step by annotation frames.
- Flush transient objects from a specific category.
  - To support variable update rates. E.g., physics may run at a different frame rate to AI.
- Client rendering override modes:
  - Solid/wireframe overlay
  - Wireframe override
- Tidy up client StreamThread and Router update loops.

Maybe:
- GL-TF scene serialiser for the client.
  - For loading reference model and exporting the current scene.
- GL-TF handler extension
  - Too expensive for primitives, but may be good for complex data.
- Support splitting recording files at around 2GB.
- TCP socket support built on POCO and/or asio.
- Consider supporting variable Endian encoding in messages, identified by the byte order of the header marker.

Performance improvements:
- Need to investigate how to do more object management off the main thread. Not well supported by Unity as it doesn't allow objects to be created on other threads.
- Improve shutdown time after using large numbers of objects.

Pie in the sky:
- Load in a mesh/scene for reference and/or context.
- Python core/server implementation
- Client "breakpoints". Server blocks until the client allows continuation.
  - Difficulty is in nicely specifying the breakpoint and enabling/disabling.
    - Maybe server macros can leverage __FILE__ and __LINE__ to help.
- An actual UX design.
