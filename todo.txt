Bugs:
- MESHSET_END() macro does not cater for releasing associated resources. Parameterisation needs to change.
- Custom socket bugs (workaround using Qt sockets):
  - On OSX there is sporadic lag.
  - Large packets go missing.
- Large steps often render before the catching the target frame.
  - Add a check to Router.Update() on whether the thread is at the target frame. Keep looping while not.
    - Also include a time limit to prevent deadlock.
- Large data frames have been known to end up an odd state whereby some data from the previous are still visible and not all data from the next frame are visible.
  - Possibly a thread safety issue on the concurrent queue.

TODO:
- Complete C++ TCP socket support built on POCO
- "Server" implementation which writes directly to a local file.
- Change shape shaders to support GPU instancing.
- Consider adding batched object creation messages.
- Consolidate C# shape constructors and improve consistency.
- Client log for error messages.
  - Handler options and UI
  - Camera Selection UI
- Playback speed control.
  - Partly implemented. Tended to hang the viewer at higher speeds.
- Scene Graph UI
- Make sure modal dialogs work properly blocking input to background layers.
- Export to PLY file (because PLY is easy).
- Annotation frames.
  - Skip/step by annotation frames.
- Flush transient objects from a specific category.
  - To support variable update rates. E.g., physics may run at a different frame rate to AI.
- Client rendering override modes:
  - Solid/wireframe overlay
  - Wireframe override

Maybe:
- Support splitting recording files at around 2GB.
- TCP socket support built on asio.

Performance improvements:
- Need to investigate how to do more object management off the main thread. Not well supported by Unity as it doesn't allow objects to be created on other threads.
- Improve shutdown time after using large numbers of objects.

Pie in the sky:
- Load in a mesh/scene for reference and/or context.
- Python core/server implementation
- Client "breakpoints". Server blocks until the client allows continuation.
  - Difficulty is in nicely specifying the breakpoint and enabling/disabling.
    - Maybe server macros can leverage __FILE__ and __LINE__ to help.
- An actual UX design.
